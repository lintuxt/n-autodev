from nautodev.command import Command

from nautodev.custom_actions import VaultShowSecretActionParser
from nautodev.custom_actions import VaultDeleteSecretActionParser
from nautodev.custom_actions import RunCommandActionParser


class Dispatcher:
    def __init__(self):
        self.command = Command()
        self.command.add_subcommand(
            "vault",
            allow_abbrev=False,
            help="use the vault to securely store your secrets",
            description="The vault is a secure storage for your secrets. "
            "The encryption key and the vault file are stored in your home directory. "
            "These files are autogenerated on the fly and they never leave your computer. "
            "Be aware that anyone with access to your computer can access your secrets. "
            "In the future, the encryption key will be protected by a password.",
        )
        self.command.add_subcommand(
            "project",
            allow_abbrev=False,
            help="manages your project's file",
            description="The project sub-command is a convenient way "
            "to manage your project's configuration file. "
            "It is a simple YAML file that contains all the commands, resources and settings. "
            "Just run 'nautodev project.py --init' to get started.",
        )
        self.command.add_subcommand(
            "run",
            allow_abbrev=False,
            help="runs your project's commands",
            description="The run sub-command is a convenient way to run your project's commands. ",
        )
        self.set_command_for_vault()
        self.set_command_for_project()
        self.set_command_for_run()

    def set_command_for_vault(self):
        self.command.add_exclusive_argument(
            "vault",
            "--init",
            action="store_const",
            const="init",
            dest="argument",
            help="initializes the vault",
        )
        self.command.add_exclusive_argument(
            "vault",
            "--status",
            action="store_const",
            const="status",
            dest="argument",
            help="shows if the vault is initialized",
        )
        self.command.add_exclusive_argument(
            "vault",
            "--list-secrets",
            action="store_const",
            const="list-secrets",
            dest="argument",
            help="list all stored secrets",
        )
        self.command.add_exclusive_argument(
            "vault",
            "--create-secret",
            action="store_const",
            const="create-secret",
            dest="argument",
            help="creates a new secret",
        )
        self.command.add_exclusive_argument(
            "vault",
            "--show-secret",
            action=VaultShowSecretActionParser,
            nargs=1,
            dest="argument",
            metavar="KEY",
            help="shows a secret",
        )
        self.command.add_exclusive_argument(
            "vault",
            "--delete-secret",
            action=VaultDeleteSecretActionParser,
            nargs=1,
            dest="argument",
            metavar="KEY",
            help="deletes a secret",
        )

    def set_command_for_project(self):
        self.command.add_exclusive_argument(
            "project",
            "--init",
            action="store_const",
            const="init",
            dest="argument",
            help="shows initialization instructions",
        )

    def set_command_for_run(self):
        self.command.add_exclusive_argument(
            "run",
            "--command",
            action=RunCommandActionParser,
            nargs=1,
            dest="argument",
            metavar="COMMAND",
            help="runs a command",
        )

    def run(self, delegate=None):
        if delegate is None:
            raise SystemExit("There was an internal error. Please contact the developer. E1000")

        args = self.command.parse_args()
        # print(vars(args))
        try:
            if "operands" in args and args.operands is not None:
                delegate[args.subcommand][args.argument](args.operands)
            else:
                delegate[args.subcommand][args.argument]()
        except KeyError:
            self.command.print_help(args.subcommand)
